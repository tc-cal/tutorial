
PYTHON SYMBOLS
. → “dot into something”
_ → “special/hidden”
: → “block starts or slicing”
// → “integer math”
[] → “lists, strings, container access (grab things by position)”
() → “call/group/function/tuple things (functions, math)”
{} → “placeholder, mapping, set, or formatting”

"for" → go through each thing
# nums = [1, 2, 3]
# doubled = [n * 2 for n in nums]
# n is temporary, just means "take each item from nums"
# print(doubled)  # [2, 4, 6]
"in" → look inside this box of things

[] → list (ordered, duplicates, can add/remove/change)
() → set (unordered, no duplicates, can add/remove, no change)
Empty () = function takes no arguments, but still needs to be called.
Filled () = you pass arguments to customize what the method does.
🔹 Related methods that do take arguments
.replace("old", "new") → replace parts of a string
.find("sub") → search for a substring
.split(",") → split into list by a delimiter

| Concept                  | What it means                      | Analogy                                       |
| ------------------------ | ---------------------------------- | --------------------------------------------- |
| `return`                 | Sends info back & ends function    | Mail package + close shop                     |
| `while True:`            | Loop forever until `break`         | “Keep asking until I say stop”                |
| `for`                    | Loop through items in a collection | “Go through every card in the deck”           |
| `not in`                 | Check that something’s not there   | “Is this toy NOT in the box?”                 |
| `code, message = play()` | Unpack multiple results            | “Take apart a lunchbox into sandwich & juice” |
